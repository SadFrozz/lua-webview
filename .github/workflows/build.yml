#.github/workflows/build.yml

name: Build Cross-Platform Binaries

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # --- ЗАДАНИЕ 1: СБОРКА ДЛЯ WINDOWS X64 С ИСПОЛЬЗОВАНИЕМ ROCK.MK И MINGW ---
  build-windows:
    name: Build for Windows (x64)
    runs-on: windows-latest

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          # ЭТО КЛЮЧЕВОЕ ИЗМЕНЕНИЕ: рекурсивно загружаем все субмодули
          submodules: 'recursive'

      - name: Set up MSYS2 for MinGW GCC
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            make
            mingw-w64-x86_64-gcc

      - name: Download Lua 5.4 source for headers
        shell: msys2 {0}
        run: |
          curl -L -R -O https://www.lua.org/ftp/lua-5.4.6.tar.gz
          tar zxf lua-5.4.6.tar.gz
          
      - name: Compile lua-webview using rock.mk
        shell: msys2 {0}
        run: |
          # Передаем пути к заголовочным файлам Lua и другие параметры в Makefile
          make -f rock.mk PLAT=windows CC=gcc LD=gcc LUA_INCDIR=$(pwd)/lua-5.4.6/src

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webview-windows-x64
          path: webview.dll

  # --- ЗАДАНИЕ 2: ПАРАЛЛЕЛЬНАЯ СБОРКА ДЛЯ MACOS (INTEL И APPLE SILICON) В ОБХОД ROCK.MK ---
  build-macos:
    name: Build for macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, arm64] # Создаем матрицу для двух архитектур

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          # ЭТО КЛЮЧЕВОЕ ИЗМЕНЕНИЕ: рекурсивно загружаем все субмодули
          submodules: 'recursive'

      - name: Install Lua for headers
        run: brew install lua

      - name: Compile webview directly for ${{ matrix.arch }}
        run: |
          clang -shared -dynamiclib \
                -o webview-${{ matrix.arch }}.dylib \
                -arch ${{ matrix.arch }} \
                -ObjC -DWEBVIEW_COCOA=1 \
                -I$(brew --prefix lua)/include/lua \
                -Iwebview-c \
                -framework WebKit \
                -framework Foundation \
                webview.c webview-c/webview-cocoa.c

      - name: Upload macOS ${{ matrix.arch }} Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webview-macos-${{ matrix.arch }}
          path: webview-${{ matrix.arch }}.dylib

  # --- ЗАДАНИЕ 3: ОБЪЕДИНЕНИЕ БИНАРНИКОВ MACOS В УНИВЕРСАЛЬНЫЙ ФАЙЛ ---
  package-macos:
    name: Package Universal macOS Binary
    runs-on: macos-latest
    needs: build-macos # Запускается только после успешного завершения обеих сборок build-macos

    steps:
      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: webview-macos-x86_64

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: webview-macos-arm64

      - name: Create Universal Binary with lipo
        run: |
          lipo -create -output webview.dylib webview-x86_64.dylib webview-arm64.dylib

      - name: Verify Universal Binary
        run: |
          echo "Verifying the created universal binary..."
          lipo -info webview.dylib
          # Вывод должен содержать "Architectures in the fat file: webview.dylib are: x86_64 arm64"

      - name: Upload Universal macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webview-macos-universal
          path: webview.dylib
