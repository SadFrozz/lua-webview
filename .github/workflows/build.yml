#.github/workflows/build.yml

name: Build lua-webview

on:
  # Запуск при отправке коммитов в ветку main
  push:
    branches: [ main ]
  # Запуск при создании или обновлении pull request, нацеленного на ветку main
  pull_request:
    branches: [ main ]
  # Позволяет запускать рабочий процесс вручную из интерфейса GitHub
  workflow_dispatch:

jobs:
  # --- ЗАДАНИЕ 1: СБОРКА ДЛЯ WINDOWS X64 ---
  build-windows:
    name: Build for Windows (x64)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive' # Клонируем субмодули, включая webview

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Install dependencies (Lua and CMake)
        run: choco install lua cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Configure CMake
        run: cmake -S. -B build -A x64

      - name: Build with MSBuild
        run: cmake --build build --config Release

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webview-windows-x64
          path: build/Release/webview.dll

  # --- ЗАДАНИЕ 2: ПАРАЛЛЕЛЬНАЯ СБОРКА ДЛЯ MACOS (INTEL И APPLE SILICON) ---
  build-macos:
    name: Build for macOS (${{ matrix.arch }})
    runs-on: macos-latest # В настоящее время это x86_64 runner
    strategy:
      matrix:
        arch: [x86_64, arm64] # Создаем матрицу для двух архитектур

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies (CMake)
        run: brew install cmake

      - name: Configure CMake for ${{ matrix.arch }}
        run: cmake -S. -B build -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}

      - name: Build with CMake
        run: cmake --build build --config Release

      - name: Upload macOS ${{ matrix.arch }} Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webview-macos-${{ matrix.arch }}
          path: build/libwebview.dylib

  # --- ЗАДАНИЕ 3: ОБЪЕДИНЕНИЕ БИНАРНИКОВ MACOS В УНИВЕРСАЛЬНЫЙ ФАЙЛ ---
  package-macos:
    name: Package Universal macOS Binary
    runs-on: macos-latest
    needs: build-macos # Это задание зависит от успешного завершения обеих сборок build-macos

    steps:
      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: webview-macos-x86_64
          path: build-x86_64

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: webview-macos-arm64
          path: build-arm64

      - name: Create Universal Binary with lipo
        run: |
          lipo -create -output libwebview.dylib build-x86_64/libwebview.dylib build-arm64/libwebview.dylib

      - name: Verify Universal Binary
        run: |
          echo "Verifying the created universal binary..."
          lipo -info libwebview.dylib
          # Ожидаемый вывод должен содержать "x86_64 arm64"

      - name: Upload Universal macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webview-macos-universal
          path: libwebview.dylib
